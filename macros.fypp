! ;;; -*- mode: fortran; -*-
! vim: ft=fortran :
#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix

#:def loop_over_nodes(code_nu1_nl1m1, code_nl1_nl='', code_nu1='', n_nodes='myDim_nod2D', arrays='', private_arrays='')
#:if defined('LOOP_ACC')
    !$acc parallel loop present(ulevels_nod2D,nlevels_nod2D#{if arrays !=''}#,#{endif}#${arrays}$)&
    !$acc& #{if private_arrays !=''}#private(${private_arrays}$)#{endif}# &
    !$acc& collapse(2)
    do n=1, ${n_nodes}$
       do nz=1, nl
        nu1 = ulevels_nod2D(n)
        nl1 = nlevels_nod2D(n)
        #:if code_nu1 != ''
        if(nu1 == nz) then
            $:code_nu1
        elseif(nu1 < nz .and. nz < nl1) then
        #:else
        if(nu1 <= nz .and. nz < nl1) then
        #:endif
            $:code_nu1_nl1m1
        #:if code_nl1_nl != ''
        elseif(nl1 <= nz .and. nz < nl) then
            $:code_nl1_nl
        #:endif
        end if
       end do
    end do
#:else
#:if defined('LOOP_OMP')
    !$omp parallel do #{if private_arrays !=''}#private(${private_arrays}$)#{endif}#
#:endif
    do n=1, ${n_nodes}$
        nu1 = ulevels_nod2D(n)
        nl1 = nlevels_nod2D(n)
        #:if code_nu1 != ''
        nz=nu1
        $:code_nu1
        do nz=nu1+1, nl1-1
        #:else
        do nz=nu1, nl1-1
        #:endif
           $:code_nu1_nl1m1
        end do
        #:if code_nl1_nl != ''
        do nz=nl1,nl-1
           $:code_nl1_nl
        end do
        #:endif
    end do
#:endif
#:enddef loop_over_nodes

#:def loop_over_nodes_by_elements(code_init, code_reduce, code_nu1, code_nu1p1_nl1m2, code_nl1m1, code_finalize='',n_nodes='myDim_nod2D', arrays='', private_arrays='')
#:if defined('LOOP_ACC')
    !$acc parallel loop present(ulevels_nod2D,nlevels_nod2D, nod_in_elem2D_num, nod_in_elem2D#{if arrays !=''}#,#{endif}#${arrays}$)&
    !$acc& #{if private_arrays !=''}#private(${private_arrays}$)#{endif}# &
    !$acc& collapse(2)
    do n=1, ${n_nodes}$
       do nz=1,nl
          nu1 = ulevels_nod2D(n)
          nl1 = nlevels_nod2D(n)
          if(nu1 <= nz .and. nz < nl1) then
             $:code_init
             !$acc loop seq
             do nn=1, nod_in_elem2D_num(n)
                elem = nod_in_elem2D(nn,n)
                $:code_reduce
             end do
             $:code_finalize
          endif
       end do
    end do


    !$acc parallel loop present(ulevels_nod2D,nlevels_nod2D#{if arrays !=''}#,#{endif}#${arrays}$)&
    !$acc& #{if private_arrays !=''}#private(${private_arrays}$)#{endif}# &
    !$acc& collapse(2)
    do n=1, ${n_nodes}$
       do nz=1,nl
         nu1 = ulevels_nod2D(n)
         nl1 = nlevels_nod2D(n)
         if(nu1 == nz) then
            $:code_nu1
         elseif(nu1 <= nz .and. nz < nl1-1) then
            $:code_nu1p1_nl1m2
         elseif(nl1-1 == nz) then
            $:code_nl1m1
         endif
       end do
    end do
#:else
#:if defined('LOOP_OMP')
    !$omp parallel do #{if private_arrays !=''}#private(${private_arrays}$)#{endif}#
#:endif
     do n=1, ${n_nodes}$
        nu1 = ulevels_nod2D(n)
        nl1 = nlevels_nod2D(n)
        do nz=nu1,nl1-1
           $:code_init
        end do
        do nn=1, nod_in_elem2D_num(n)
           elem = nod_in_elem2D(nn,n)
           do nz=nu1,nl1-1
              $:code_reduce
           end do
        end do

        nz=nu1
        $:code_nu1

        do nz=nu1+1,nl1-2
           $:code_nu1p1_nl1m2
        end do

        nz=nl1-1
        $:code_nl1m1
     end do
#:endif
#:enddef loop_over_nodes_by_elements

#:def loop_over_elements(code_nu1_nl1m1, code_nl1_nl='', n_elemts='myDim_elem2D', arrays='', private_arrays='')
#:if defined('LOOP_ACC')
    !$acc parallel loop present(ulevels,nlevels,elem2D_nodes#{if arrays !=''}#,#{endif}#${arrays}$)&
    !$acc& private(enodes#{if private_arrays !=''}#,#{endif}#${private_arrays}$) &
    !$acc& collapse(2)
    do elem=1, ${n_elemts}$
       do nz=1,nl
          enodes=elem2D_nodes(:,elem)
          nu1=ulevels(elem)
          nl1=nlevels(elem)
               if(nu1 <= nz .and. nz < nl1) then
                  $:code_nu1_nl1m1
               #:if code_nl1_nl != ''
               elseif(nl1 <= nz .and. nz < nl) then
                  $:code_nl1_nl
               #:endif
               end if
       end do
    end do
#:else
#:if defined('LOOP_OMP')
    !$omp parallel do #{if private_arrays !=''}#private(${private_arrays}$)#{endif}#
#:endif
   do elem=1, ${n_elemts}$
      enodes=elem2D_nodes(:,elem)
      nu1 = ulevels(elem)
      nl1 = nlevels(elem)
      do nz=nu1, nl1-1
        $:code_nu1_nl1m1
      end do
      #:if code_nl1_nl != ''
      do nz=nl1,nl-1
        $:code_nl1_nl
      end do
      #:endif
   end do
#:endif
#:enddef loop_over_elements

#:def loop_over_edges(code_nu1_nl1, n_edges='myDim_edge2D', arrays='', private_arrays='')
#:if defined('LOOP_ACC')
    !$acc parallel loop present(ulevels_edge,nlevels_edge,edges#{if arrays !=''}#,#{endif}#${arrays}$)&
    !$acc& private(enodes#{if private_arrays !=''}#,#{endif}#${private_arrays}$) &
    !$acc& collapse(2)
     do edge=1, myDim_edge2D
        do nz=1, nl
           enodes(1:2)=edges(:,edge)
           nu1 = ulevels_edge(edge)
           nl1 = nlevels_edge(edge)
           if(nu1 <= nz .and. nz <= nl1) then
             $:code_nu1_nl1
           endif
        end do
     end do
#:else
#:if defined('LOOP_OMP')
    !$omp parallel do #{if private_arrays !=''}#private(${private_arrays}$)#{endif}#
#:endif
     do edge=1, myDim_edge2D
        enodes(1:2)=edges(:,edge)
        nu1 = ulevels_edge(edge)
        nl1 = nlevels_edge(edge)
        do nz=nu1, nl1
          $:code_nu1_nl1
        end do
     end do
#:endif
#:enddef loop_over_edges
